#usda 1.0
(
    defaultPrim = "Scene"
    endTimeCode = 1
    startTimeCode = 1
    upAxis = "Z"
)

class Mesh "Plane" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    float3[] extent = [(-2, 0, -2), (2, 0, 2)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 2, 3]
    rel material:binding = </Scene/Looks/Material>
    point3f[] points = [(-2, 0, -2), (2, 0, -2), (2, 0, 2), (-2, 0, 2)]
    color3f[] primvars:displayColor = [(0.1, 0.5, 0.8)]
    float2[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
        interpolation = "vertex"
    )
    uniform token orientation = "rightHanded"
}

class Mesh "QuadMeshProto"
{
    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
    int[] faceVertexIndices = [0, 1, 6, 5, 1, 2, 7, 6, 2, 3, 8, 7, 3, 4, 9, 8, 5, 6, 11, 10, 6, 7, 12, 11, 7, 8, 13, 12, 8, 9, 14, 13, 10, 11, 16, 15, 11, 12, 17, 16, 12, 13, 18, 17, 13, 14, 19, 18, 15, 16, 21, 20, 16, 17, 22, 21, 17, 18, 23, 22, 18, 19, 24, 23]
    point3f[] points = [(-1, 0, -1), (-0.5, 0, -1), (0, 0, -1), (0.5, 0, -1), (1, 0, -1), (-1, 0, -0.5), (-0.5, 0.2, -0.5), (0, 0.2, -0.5), (0.5, 0.2, -0.5), (1, 0, -0.5), (-1, 0, 0), (-0.5, 0.2, 0), (0, 0.3, 0), (0.5, 0.2, 0), (1, 0, 0), (-1, 0, 0.5), (-0.5, 0.2, 0.5), (0, 0.2, 0.5), (0.5, 0.2, 0.5), (1, 0, 0.5), (-1, 0, 1), (-0.5, 0, 1), (0, 0, 1), (0.5, 0, 1), (1, 0, 1)]
    texCoord2f[] primvars:st_faceVarying = [(0, 0), (0.2, 0), (0.5, 0), (0.8, 0), (1, 0), (0, 0.2), (0.2, 0.2), (0.5, 0.1), (0.8, 0.2), (1, 0.2), (0, 0.4), (0.2, 0.4), (0.5, 0.2), (0.8, 0.4), (1, 0.4), (0, 0.6), (0.25, 0.6), (0.5, 0.4), (0.75, 0.6), (1, 0.6), (0, 0.8), (0.25, 0.8), (0.5, 0.65), (0.75, 0.8), (1, 0.8), (0, 1), (0.25, 1), (0.5, 1), (0.75, 1), (1, 1), (0.4, 0), (0.6, 0), (0.4, 0.1), (0.6, 0.1), (0.4, 0.25), (0.6, 0.25), (0.4, 1), (0.6, 1)] (
        interpolation = "faceVarying"
    )
    int[] primvars:st_faceVarying:indices = [0, 1, 6, 5, 1, 30, 32, 6, 31, 3, 8, 33, 3, 4, 9, 8, 5, 6, 11, 10, 6, 32, 34, 11, 33, 8, 13, 35, 8, 9, 14, 13, 15, 16, 21, 20, 16, 17, 22, 21, 17, 18, 23, 22, 18, 19, 24, 23, 20, 21, 26, 25, 21, 22, 36, 26, 22, 23, 28, 37, 23, 24, 29, 28]
    uniform token orientation = "leftHanded"
}

def Xform "Scene" (
    kind = "component"
)
{
    def Scope "Looks"
    {
        def Material "Material1"
        {
            string inputs:textureCoords = "st"
            token outputs:surface.connect = </Scene/Looks/Material1/PbrPreview.outputs:surface>

            def Shader "PbrPreview"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </Scene/Looks/Material1/Texture.outputs:rgb>
                token outputs:surface
            }

            def Shader "Primvar"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                string inputs:varname.connect = </Scene/Looks/Material1.inputs:textureCoords>
                float2 outputs:result
            }

            def Shader "Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @WoodPlanks.jpg@
                float2 inputs:st.connect = </Scene/Looks/Material1/Primvar.outputs:result>
                float3 outputs:rgb
            }
        }

        def Material "Material2"
        {
            string inputs:textureCoords = "st"
            token outputs:surface.connect = </Scene/Looks/Material2/PbrPreview.outputs:surface>

            def Shader "PbrPreview"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </Scene/Looks/Material2/Texture.outputs:rgb>
                token outputs:surface
            }

            def Shader "Primvar"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                string inputs:varname.connect = </Scene/Looks/Material2.inputs:textureCoords>
                float2 outputs:result
            }

            def Shader "Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @WoodPlanks.jpg@
                float4 inputs:bias = (0, 0, 0, 0)
                float4 inputs:scale = (1, 0.2, 1, 1)
                float2 inputs:st.connect = </Scene/Looks/Material2/Primvar.outputs:result>
                float3 outputs:rgb
            }
        }

        def Material "Material3"
        {
            string inputs:textureCoords = "st"
            token outputs:surface.connect = </Scene/Looks/Material3/PbrPreview.outputs:surface>

            def Shader "PbrPreview"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </Scene/Looks/Material3/Texture.outputs:rgb>
                color3f inputs:metallic.connect = </Scene/Looks/Material3/Texture.outputs:rgb>
                color3f inputs:roughness.connect = </Scene/Looks/Material3/Texture.outputs:rgb>
                color3f inputs:normal.connect = </Scene/Looks/Material3/Texture.outputs:rgb>
                color3f inputs:occlusion.connect = </Scene/Looks/Material3/Texture.outputs:rgb>
                color3f inputs:emissiveColor.connect = </Scene/Looks/Material3/Texture.outputs:rgb>
                color3f inputs:specularColor.connect = </Scene/Looks/Material3/Texture.outputs:rgb>
                token outputs:surface
            }

            def Shader "Primvar"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                string inputs:varname.connect = </Scene/Looks/Material3.inputs:textureCoords>
                float inputs:fallback = 0.0 (
                    doc = """Fallback value to be returned when fetch failed."""
                    sdrMetadata = {
                        token defaultInput = "1"
                    }
                )

                float2 outputs:result
            }

            def Shader "Transform2d"
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </Scene/Looks/Material3/Primvar.outputs:result>

                float inputs:rotation = 0.0
                float2 inputs:scale = (0.5, 1.0)
                float2 inputs:translation = (0.0, 0.0)

                float2 outputs:result
            }

            def Shader "Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @WoodPlanks.jpg@
                float4 inputs:bias = (0.2, 0, 0.2, 0)
                float4 inputs:scale = (1, 1, 1, 1)
                token inputs:wrapS = "useMetadata"
                token inputs:wrapT = "useMetadata"
                float4 inputs:fallback = (0.0, 0.0, 0.0, 1.0)
                float2 inputs:st.connect = </Scene/Looks/Material3/Primvar.outputs:result>
                float3 outputs:rgb
                float outputs:a
                float outputs:b
                float outputs:g
                float outputs:r
            }
        }

        def Material "Material4"
        {
            string inputs:textureCoords = "st"
            token outputs:surface.connect = </Scene/Looks/Material4/PbrPreview.outputs:surface>

            def Shader "PbrPreview"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </Scene/Looks/Material4/Texture.outputs:rgb>
                float inputs:metallic = 0.0
                float inputs:roughness = 0.5
                normal3f inputs:normal = (0.0, 0.0, 1.0)
                float inputs:occlusion = 1.0
                color3f inputs:emissiveColor = (0.0, 0.0, 0.0)
                color3f inputs:specularColor = (0.0, 0.0, 0.0)
                float inputs:opacity = 0.8
                float inputs:opacityThreshold = 0.1
                float inputs:ior = 1.5
                int inputs:useSpecularWorkflow = 0

                token outputs:surface
            }

            def Shader "Primvar"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                string inputs:varname.connect = </Scene/Looks/Material4.inputs:textureCoords>
                float2 outputs:result
            }

            def Shader "Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @WoodPlanks.jpg@
                float4 inputs:bias = (0.2, 0, 0.2, 0)
                float4 inputs:scale = (1, 0.2, 1, 1)
                float2 inputs:st.connect = </Scene/Looks/Material4/Primvar.outputs:result>
                float3 outputs:rgb
            }
        }
    }

    def Xform "Geom"
    {
        def "Plane1" (
            references = </Plane>
        )
        {
            double3 xformOp:translate = ( -2.25, 0, 2.25)
            uniform token[] xformOpOrder = ["xformOp:translate"]

            rel material:binding = </Scene/Looks/Material1>
        }

        def "Plane2" (
            references = </Plane>
        )
        {
            double3 xformOp:translate = ( 2.25, 0, 2.25)
            uniform token[] xformOpOrder = ["xformOp:translate"]

            rel material:binding = </Scene/Looks/Material2>
        }

        def "Plane3" (
            references = </Plane>
        )
        {
            double3 xformOp:translate = ( -2.25, 0,-2.25)
            uniform token[] xformOpOrder = ["xformOp:translate"]

            rel material:binding = </Scene/Looks/Material3>
        }

        def "Plane4" (
            references = </Plane>
        )
        {
            double3 xformOp:translate = ( 2.25, 0, -2.25)
            uniform token[] xformOpOrder = ["xformOp:translate"]

            rel material:binding = </Scene/Looks/Material4>
        }
    }

    def Xform "Lights"
    {
        # Set the purpose for lights to "render" so that they're not included
        # in the test's frameAll calculation.
        uniform token purpose = "render"

        def DomeLight "Light"
        {
        }
    }

    def Xform "Cameras" (
        kind = "assembly"
    )
    {
        def Camera "main_cam"
        {
            float2 clippingRange = (0.1, 10000)
            float focalLength = 35
            float focusDistance = 5
            float fStop = 5.6
            float horizontalAperture = 35.999928
            float verticalAperture = 23.999952
            float3 xformOp:rotateXYZ = (62.482925, -3.1805547e-15, 43.994915)
            double3 xformOp:translate = (3.8079010269722375, -3.943897492221248, 3.3559257702291783)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]
        }
    }
}

